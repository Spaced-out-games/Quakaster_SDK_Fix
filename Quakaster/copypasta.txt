#pragma once
#include "../qk/QKTL.h"
#include "qkmath.h"
#include "../Core.h"
#include "../qknet/Convar.h"






namespace qk
{
	class QK_API Camera
	{
		

		float* m_Fov = nullptr; // might be controlled by r_fov
		float* m_Near = nullptr; // might be controlled by r_near
		float* m_Far = nullptr; // might be controlled by r_far
		float* m_AspectRatio = nullptr; // might be controlled by r_aspect
		bool m_Allocated = 0;
		public:
		
		// Creates a camera with its state stored internally.
		Camera(float FOV, float Aspect, float Near, float Far);

		// Creastes a camera with its state stored externally. Great for linking against convars
		Camera(float* FOV_ptr, float* Aspect_ptr, float* Near_ptr, float* Far_ptr);

		// Default camera binds to convars
		Camera();

		// Gets the projection matrix
		mat4 projection();

		// some getters and setters to come...
		inline void set_fov(float new_fov);
		inline void set_near(float new_near);
		inline void set_far(float new_far);
		inline void set_aspect(float new_aspect);
	};
}